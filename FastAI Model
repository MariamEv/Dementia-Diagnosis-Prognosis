{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "540630d2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-01T15:36:30.661023Z",
     "iopub.status.busy": "2024-09-01T15:36:30.660637Z",
     "iopub.status.idle": "2024-09-01T15:36:35.530683Z",
     "shell.execute_reply": "2024-09-01T15:36:35.529347Z"
    },
    "papermill": {
     "duration": 4.876417,
     "end_time": "2024-09-01T15:36:35.532848",
     "exception": false,
     "start_time": "2024-09-01T15:36:30.656431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/alzheimers-dataset-4-class-of-images/Alzheimer_s Dataset/train/MildDemented/mildDem557.jpg\n"
     ]
    }
   ],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "import os\n",
    "\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        img_path = (os.path.join(dirname, filename))\n",
    "print(img_path)\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56846349",
   "metadata": {
    "papermill": {
     "duration": 0.00187,
     "end_time": "2024-09-01T15:36:35.537111",
     "exception": false,
     "start_time": "2024-09-01T15:36:35.535241",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Download & Access Images + Showing a Sample of Each Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e24910db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-01T15:36:35.542626Z",
     "iopub.status.busy": "2024-09-01T15:36:35.542190Z",
     "iopub.status.idle": "2024-09-01T15:36:44.250322Z",
     "shell.execute_reply": "2024-09-01T15:36:44.249314Z"
    },
    "papermill": {
     "duration": 8.713371,
     "end_time": "2024-09-01T15:36:44.252450",
     "exception": false,
     "start_time": "2024-09-01T15:36:35.539079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error: {e}\n",
      "error: {e}\n",
      "error: {e}\n",
      "error: {e}\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from fastai.vision.all import *\n",
    "from pathlib import Path\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "train_path = Path('/kaggle/input/alzheimers-dataset-4-class-of-images/Alzheimer_s Dataset/train')\n",
    "\n",
    "# Get a list of all classes (subfolders) in the training dataset\n",
    "classes = train_path.ls().filter(lambda p: p.is_dir())\n",
    "\n",
    "# Initialize the figure for a 2x2 grid\n",
    "fig, axes = plt.subplots(2, 2, figsize=(10, 10))\n",
    "\n",
    "# Flatten the axes array for easy iteration\n",
    "axes = axes.flatten()\n",
    "\n",
    "# Display one image from each class in a 2x2 grid\n",
    "for i, class_folder in enumerate(classes[:4]):  # Limit to the first 4 classes for the 2x2 grid\n",
    "    images = class_folder.ls().filter(lambda p: p.suffix in ['.jpg', '.jpeg', '.png'])\n",
    "    \n",
    "    if images: \n",
    "        try:\n",
    "            original_size = img.size\n",
    "            print(f\"Original size of {class_folder.name} image: {original_size}\")\n",
    "            \n",
    "            img = PILImage.create(images[0])\n",
    "            img = img.to_thumb(256, 256)\n",
    "    \n",
    "            axes[i].imshow(img)\n",
    "            axes[i].set_title(class_folder.name)\n",
    "            axes[i].axis('off')\n",
    "        except Exception as e:\n",
    "            print(\"error: {e}\")\n",
    "    else:\n",
    "        print(f\"No images found\")\n",
    "\n",
    "# Adjust layout\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f25b1ef",
   "metadata": {
    "papermill": {
     "duration": 0.002254,
     "end_time": "2024-09-01T15:36:44.257291",
     "exception": false,
     "start_time": "2024-09-01T15:36:44.255037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 457093,
     "sourceId": 861496,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30763,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 18.719909,
   "end_time": "2024-09-01T15:36:46.632736",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-01T15:36:27.912827",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
